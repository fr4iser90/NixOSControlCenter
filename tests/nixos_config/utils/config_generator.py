# tests/nixos_config/utils/config_generator.py
from typing import Dict, Any, List

class NixOSConfigGenerator:
    """Generator für NixOS-Konfigurationen"""
    
    def __init__(self):
        # Verfügbare Optionen
        self.available_options = {
            'systemType': [
                'gaming-workstation',
                'headless',
                'gaming'
            ],
            'desktop': [
                'plasma',
                'gnome',
                'xfce',
                None
            ],
            'gpu': [
                'amdgpu',
                'nvidia',
                'intel'
            ]
        }
        
        # Standardwerte
        self.base_configs = {
            'systemType': 'gaming-workstation',
            'bootloader': 'systemd-boot',
            'mainUser': 'testuser',
            'guestUser': '',
            'hostName': 'testhost',
            'timeZone': 'Europe/Berlin',
            'locales': ['en_US.UTF-8'],
            'keyboardLayout': 'de',
            'desktop': 'plasma',
            'displayManager': 'sddm',
            'gpu': 'amdgpu',
            'audio': 'pipewire'
        }
    
    def generate_env(self, **config) -> str:
        """Generiert env.nix Inhalt"""
        env_config = self.base_configs.copy()
        env_config.update(config)
        
        # Füge Test-Flag hinzu
        env_config['testing'] = True
        
        return f"""
# This file is generated by the NixOS Control Center
{{
  # System Configuration
  systemType = "{env_config.get('systemType', 'desktop-workstation')}";
  hostName = "{env_config.get('hostName', 'nixos')}";
  testing = true;  # Test-Modus aktiviert
  
  # ... Rest der Konfiguration ...
}}
"""
    
    def get_default_config(self) -> Dict[str, Any]:
        """Liefert Standard-Konfiguration"""
        return self.base_configs.copy()
    
    def format_config(self, config: Dict[str, Any]) -> str:
        """Formatiert Konfiguration als Nix-Code"""
        return f"""{{
  # System Configuration
  systemType = "{config['systemType']}";
  bootloader = "{config['bootloader']}";
  mainUser = "{config['mainUser']}";
  guestUser = "{env_config['guestUser']}";
  hostName = "{config['hostName']}";
  timeZone = "{config['timeZone']}";
  locales = [ "{'" "'.join(config['locales'])}" ];
  keyboardLayout = "{config['keyboardLayout']}";
  
  # Desktop Environment
  desktop = {f'"{config["desktop"]}"' if config['desktop'] else "null"};
  displayManager = "{config['displayManager']}";
  
  # Hardware
  gpu = "{config['gpu']}";
  audio = "{config['audio']}";
}}"""