{"concept": "What is the /nix/store?", "explanation": "[System Architecture] The /nix/store is the core component of NixOS's architecture. It stores all packages, configuration files, and system components in isolation. Each item gets a unique path containing a cryptographic hash of all its inputs, ensuring reproducibility and preventing conflicts.", "examples": ["/nix/store/<hash>-firefox-version", "/nix/store/<hash>-nginx.conf"], "references": ["NixOS Store Documentation", "Nix Architecture Guide"]}

{"concept": "How is the NixOS file system structured?", "explanation": "[System Architecture] NixOS uses a unique file system structure centered around /nix. Key components include: 1) /nix/store for all packages and configurations, 2) /nix/var for state data and profiles, 3) /etc/nixos for system configuration, and 4) Generated /etc for system state. Traditional Unix directories like /bin or /usr/lib are not used directly.", "examples": ["Profile management in /nix/var/nix/profiles", "Configuration in /etc/nixos/configuration.nix"], "references": ["NixOS Filesystem Hierarchy", "System Structure Guide"]}

{"concept": "What are NixOS profiles?", "explanation": "[System Architecture] Profiles are symbolic links that point to specific generations of packages or system configurations. They're stored in /nix/var/nix/profiles and enable atomic upgrades and rollbacks. Each user has their own profile, and there's a system-wide profile for global packages.", "examples": ["User profiles in /nix/var/nix/profiles/per-user/<name>", "System profile management"], "references": ["Profile Management Guide", "User Environment Documentation"]}

{"concept": "How does the NixOS boot process work?", "explanation": "[System Architecture] The NixOS boot process is managed by the bootloader (GRUB/systemd-boot) which maintains entries for different system generations. During boot: 1) Bootloader loads the selected generation, 2) System activates the configuration, 3) systemd starts services according to the configuration. This enables safe testing of new configurations.", "examples": ["Multiple boot entries for different generations", "Safe rollback through boot menu"], "references": ["Boot Process Documentation", "System Generation Guide"]}

{"concept": "What is a NixOS system generation?", "explanation": "[System Architecture] A system generation is a complete snapshot of a system configuration, including all packages, services, and settings. Each nixos-rebuild creates a new generation in /nix/store and updates the system profile to point to it. This enables atomic updates and easy rollbacks.", "examples": ["Listing generations with nix-env --list-generations", "Rolling back with nixos-rebuild --rollback"], "references": ["Generation Management Guide", "System Rollback Documentation"]}

{"concept": "How does NixOS handle system services?", "explanation": "[System Architecture] NixOS uses systemd for service management but configures it declaratively. Services are defined in the NixOS configuration, which generates systemd unit files. This ensures service configurations are reproducible and version-controlled.", "examples": ["Declarative service configuration", "Automatic dependency management"], "references": ["Service Management Guide", "systemd Integration Documentation"]}

{"concept": "What is the NixOS module system?", "explanation": "[System Architecture] The module system is NixOS's framework for organizing configuration into reusable, composable units. Modules can declare options, set defaults, and implement functionality. They're combined using a sophisticated merge system that handles dependencies and conflicts.", "examples": ["Creating custom modules", "Importing existing modules"], "references": ["Module System Documentation", "Configuration Composition Guide"]}

{"concept": "How does NixOS handle system state?", "explanation": "[System Architecture] NixOS separates system state into two categories: 1) Declarative state managed through configuration.nix and stored in /nix/store, and 2) Mutable state (like databases) explicitly managed in specified locations. This separation ensures reproducibility while allowing necessary stateful operations.", "examples": ["Database persistence configuration", "User data management"], "references": ["State Management Guide", "System Persistence Documentation"]}

{"concept": "What is the role of derivations in NixOS?", "explanation": "[System Architecture] Derivations are the basic building blocks of NixOS. They're low-level descriptions of how to build packages or system components. Each derivation specifies inputs (source, dependencies) and build instructions, producing deterministic outputs in /nix/store.", "examples": ["Package build descriptions", "System configuration generation"], "references": ["Derivation Documentation", "Build System Guide"]}

{"concept": "How does NixOS handle configuration files?", "explanation": "[System Architecture] NixOS generates configuration files from declarative specifications rather than modifying them in place. This happens during system activation: 1) Files are built in /nix/store, 2) Symbolic links are created in /etc and other locations, 3) Services are notified of changes.", "examples": ["Generated nginx.conf", "Dynamic system configuration"], "references": ["Configuration Management Guide", "File Generation Documentation"]}
