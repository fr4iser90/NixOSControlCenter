{"concept": "What is the basic NixOS workflow?", "explanation": "[Workflow] The basic NixOS workflow consists of: 1) Edit configuration files (usually /etc/nixos/configuration.nix), 2) Run nixos-rebuild switch to apply changes, 3) Test the new configuration, 4) Rollback if needed using nixos-rebuild --rollback. This ensures safe system modifications.", "examples": ["Editing configuration.nix", "Applying system changes"], "references": ["NixOS Workflow Guide", "Basic Usage Documentation"]}

{"concept": "How do you manage system configurations?", "explanation": "[Workflow] System configurations are managed through .nix files, primarily configuration.nix. Common workflows include: 1) Splitting configurations into modules, 2) Version controlling configurations, 3) Testing changes in a VM, 4) Using git for configuration management.", "examples": ["Modular configuration setup", "Version control workflow"], "references": ["Configuration Management Guide", "Best Practices Documentation"]}

{"concept": "What are common NixOS commands?", "explanation": "[Workflow] Essential NixOS commands include: 1) nixos-rebuild for system updates, 2) nix-env for user packages, 3) nix-collect-garbage for cleanup, 4) nix-channel for update sources, 5) nix-shell for development environments. These commands handle most day-to-day operations.", "examples": ["System updates", "Package management", "Environment setup"], "references": ["Command Reference", "Daily Usage Guide"]}

{"concept": "How do you update NixOS?", "explanation": "[Workflow] Updating NixOS involves: 1) Update channels with nix-channel --update, 2) Rebuild system with nixos-rebuild switch --upgrade, 3) Test new configuration, 4) Optionally clean old generations. Updates are atomic and can be rolled back if issues occur.", "examples": ["System upgrade process", "Channel management"], "references": ["Update Guide", "System Maintenance Documentation"]}

{"concept": "What is the development workflow in NixOS?", "explanation": "[Workflow] NixOS development workflow typically involves: 1) Creating development environments with nix-shell, 2) Managing project dependencies through shell.nix or flake.nix, 3) Using direnv for automatic environment switching, 4) Testing in isolated environments.", "examples": ["Development environment setup", "Project isolation"], "references": ["Development Guide", "Environment Management"]}

{"concept": "How do you troubleshoot NixOS?", "explanation": "[Workflow] Troubleshooting in NixOS follows these steps: 1) Check system logs with journalctl, 2) Test configuration with nixos-rebuild test, 3) Boot into previous generation if needed, 4) Use nix-shell for isolated testing. The declarative nature makes issues reproducible and fixable.", "examples": ["Debugging boot issues", "Service troubleshooting"], "references": ["Troubleshooting Guide", "Problem Resolution Documentation"]}

{"concept": "What is the backup workflow in NixOS?", "explanation": "[Workflow] NixOS backup workflow includes: 1) Backing up configuration files, 2) Saving user data from specified locations, 3) Optionally backing up /nix/store paths, 4) Using tools like borgbackup or restic. The declarative nature means system state can be reconstructed from configs.", "examples": ["Configuration backup", "Data preservation"], "references": ["Backup Guide", "Data Management Documentation"]}

{"concept": "How do you manage multiple NixOS systems?", "explanation": "[Workflow] Managing multiple NixOS systems involves: 1) Sharing common configurations through modules, 2) Using git for version control, 3) Implementing machine-specific configurations, 4) Optionally using NixOps for deployment. This enables consistent management across systems.", "examples": ["Shared configuration setup", "Multi-machine management"], "references": ["Multi-System Management", "Deployment Guide"]}

{"concept": "What is the service management workflow?", "explanation": "[Workflow] Service management in NixOS involves: 1) Declaring services in configuration.nix, 2) Setting service options and dependencies, 3) Applying changes with nixos-rebuild, 4) Monitoring with systemctl. Services are managed declaratively and start/stop automatically.", "examples": ["Service configuration", "Monitoring setup"], "references": ["Service Management Guide", "Monitoring Documentation"]}

{"concept": "How do you handle system maintenance?", "explanation": "[Workflow] System maintenance workflows include: 1) Regular updates through nixos-rebuild, 2) Garbage collection with nix-collect-garbage, 3) Monitoring disk usage in /nix/store, 4) Managing system generations. This keeps the system clean and efficient.", "examples": ["Regular maintenance tasks", "Storage management"], "references": ["Maintenance Guide", "System Care Documentation"]}
