{"concept": "What are NixOS options?", "explanation": "[Options] NixOS options are the configuration settings available in the system. They are declared by modules and provide a typed, documented interface for system configuration. Options have types, descriptions, default values, and can be required or optional.", "examples": ["Basic option usage", "Option documentation"], "references": ["Options Manual", "Configuration Guide"]}

{"concept": "What types are available for options?", "explanation": "[Options] NixOS options can use various types: 1) Basic types (bool, int, string), 2) Complex types (attrsOf, listOf), 3) Enum types for fixed choices, 4) Submodule types for nested configuration, 5) Custom types for specific needs.", "examples": ["Type definitions", "Complex type usage"], "references": ["Type System Documentation", "Option Types Guide"]}

{"concept": "How do you declare options?", "explanation": "[Options] Options are declared in modules using options.*. Each declaration includes: 1) Type specification, 2) Description, 3) Optional default value, 4) Optional example, 5) Optional related options. This provides a self-documenting configuration interface.", "examples": ["Option declaration", "Documentation strings"], "references": ["Option Declaration Guide", "Module Writing Documentation"]}

{"concept": "What are option defaults?", "explanation": "[Options] Option defaults provide initial values when not explicitly set. They can be: 1) Static values, 2) Computed from other options, 3) Conditional based on system state, 4) Platform-specific values. Defaults make configuration more convenient while remaining flexible.", "examples": ["Default values", "Computed defaults"], "references": ["Default Value Guide", "Option Configuration Documentation"]}

{"concept": "How do you find available options?", "explanation": "[Options] NixOS options can be discovered through: 1) The nixos-option command, 2) NixOS options website, 3) Module documentation, 4) Source code exploration. Tools provide type information, descriptions, and current values.", "examples": ["Option search", "Documentation lookup"], "references": ["Option Discovery Guide", "Search Tools Documentation"]}

{"concept": "What are option dependencies?", "explanation": "[Options] Options can depend on other options through: 1) Direct references in default values, 2) Conditional enabling/disabling, 3) Assert statements for requirements, 4) Type dependencies. The module system ensures consistent resolution.", "examples": ["Option dependencies", "Conditional configuration"], "references": ["Dependency Management Guide", "Option Interaction Documentation"]}

{"concept": "How do you handle option conflicts?", "explanation": "[Options] Option conflicts are handled through: 1) Priority levels in option declarations, 2) Explicit conflict declarations, 3) Module composition rules, 4) Warning and error messages. The module system prevents invalid configurations.", "examples": ["Conflict resolution", "Priority handling"], "references": ["Conflict Resolution Guide", "Module System Documentation"]}

{"concept": "What are option types best practices?", "explanation": "[Options] Best practices for option types include: 1) Using the most specific type possible, 2) Providing clear type descriptions, 3) Using enums for fixed choices, 4) Implementing custom types when needed, 5) Documenting type constraints.", "examples": ["Type selection", "Custom types"], "references": ["Type Best Practices", "Option Design Guide"]}

{"concept": "How do you validate option values?", "explanation": "[Options] Option values can be validated through: 1) Type system constraints, 2) Custom validation functions, 3) Assert statements, 4) Warning messages. This ensures configuration correctness before activation.", "examples": ["Value validation", "Error messages"], "references": ["Validation Guide", "Configuration Testing Documentation"]}

{"concept": "What are advanced option features?", "explanation": "[Options] Advanced option features include: 1) Computed option values, 2) Option merging strategies, 3) Option aliasing, 4) Hidden options, 5) Dynamic option generation. These enable complex configuration scenarios.", "examples": ["Advanced usage", "Complex configurations"], "references": ["Advanced Options Guide", "Expert Configuration Documentation"]}
