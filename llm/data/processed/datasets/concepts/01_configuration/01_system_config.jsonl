{"concept": "What is configuration.nix?", "explanation": "[System Configuration] configuration.nix is the main system configuration file in NixOS. It defines the entire system state declaratively, including hardware settings, installed packages, services, users, and network configuration. This file is evaluated by nixos-rebuild to create a new system configuration.", "examples": ["Basic system configuration", "Hardware-specific settings"], "references": ["NixOS Configuration Manual", "System Setup Guide"]}

{"concept": "What is the basic structure of configuration.nix?", "explanation": "[System Configuration] A configuration.nix file consists of: 1) The { config, pkgs, ... }: header, 2) System-specific settings like boot and hardware, 3) Package declarations in environment.systemPackages, 4) Service configurations, 5) Network and user settings. All settings use the options defined in NixOS modules.", "examples": ["Minimal configuration", "Full system setup"], "references": ["Configuration Structure Guide", "NixOS Options Manual"]}

{"concept": "How do you organize NixOS configurations?", "explanation": "[System Configuration] NixOS configurations can be organized using: 1) Multiple .nix files imported into configuration.nix, 2) Machine-specific configurations in separate files, 3) Shared modules for common settings, 4) Role-based configurations (e.g., desktop, server). This makes configurations maintainable and reusable.", "examples": ["Multi-file organization", "Role-based setup"], "references": ["Configuration Organization Guide", "Best Practices Documentation"]}

{"concept": "What are configuration options in NixOS?", "explanation": "[System Configuration] Configuration options are the settings available in NixOS configurations. They're defined by modules and have types, descriptions, and default values. Options can be simple values, lists, attribute sets, or complex types. The nixos-option command shows available options.", "examples": ["Setting system options", "Finding available options"], "references": ["Options Documentation", "Configuration Options Guide"]}

{"concept": "How do you handle secrets in NixOS configuration?", "explanation": "[System Configuration] Secrets in NixOS can be handled through: 1) External files referenced in configuration, 2) Age encryption for secrets, 3) Runtime secret injection, 4) Separate private modules. Secrets should never be stored directly in configuration files as they become visible in /nix/store.", "examples": ["Secure secret management", "Encrypted credentials"], "references": ["Secret Management Guide", "Security Best Practices"]}

{"concept": "What is system activation in NixOS?", "explanation": "[System Configuration] System activation is the process of applying a new configuration. It involves: 1) Building the new system derivation, 2) Creating necessary directories and files, 3) Starting/stopping services, 4) Updating boot loader entries. Activation scripts handle the transition between configurations.", "examples": ["Activation process", "Service transitions"], "references": ["Activation Documentation", "System Change Guide"]}

{"concept": "How do you test NixOS configurations?", "explanation": "[System Configuration] NixOS configurations can be tested through: 1) nixos-rebuild test for temporary activation, 2) Virtual machines with nixos-rebuild build-vm, 3) Containerized testing, 4) NixOS tests framework. This ensures changes are safe before permanent application.", "examples": ["VM testing", "Configuration validation"], "references": ["Testing Guide", "Configuration Verification"]}

{"concept": "What are configuration profiles in NixOS?", "explanation": "[System Configuration] Configuration profiles are complete system configurations stored in /nix/var/nix/profiles. Each nixos-rebuild creates a new profile, enabling: 1) Easy rollbacks, 2) Multiple configuration versions, 3) Boot-time configuration selection, 4) Safe system updates.", "examples": ["Profile management", "Configuration switching"], "references": ["Profile Management Guide", "System Generation Documentation"]}

{"concept": "How do you handle machine-specific configurations?", "explanation": "[System Configuration] Machine-specific configurations can be managed through: 1) Separate configuration files per machine, 2) Conditional imports based on hostname, 3) Hardware-specific modules, 4) Role-based configurations. This enables sharing common configurations while handling specific needs.", "examples": ["Per-machine setup", "Hardware-specific config"], "references": ["Machine Configuration Guide", "Hardware Management"]}

{"concept": "What are configuration best practices in NixOS?", "explanation": "[System Configuration] NixOS configuration best practices include: 1) Using version control for configurations, 2) Splitting configurations into logical modules, 3) Documenting custom options and modules, 4) Testing changes before deployment, 5) Regular backups of configurations. These practices ensure maintainable and reliable systems.", "examples": ["Configuration organization", "Documentation examples"], "references": ["Best Practices Guide", "Configuration Management Documentation"]}
