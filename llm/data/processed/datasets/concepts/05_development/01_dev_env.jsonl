{"concept": "What is a Nix development environment?", "explanation": "[Development] A Nix development environment is an isolated workspace that contains: 1) Project-specific dependencies, 2) Development tools, 3) Environment variables, 4) Build configurations. This ensures reproducible development setups.", "examples": ["Basic environment", "Project setup"], "references": ["Development Guide", "Environment Documentation"]}

{"concept": "How do you use nix-shell?", "explanation": "[Development] nix-shell provides temporary development environments by: 1) Loading specified dependencies, 2) Setting environment variables, 3) Configuring build tools, 4) Providing isolated shells. This enables project-specific environments.", "examples": ["Shell usage", "Environment configuration"], "references": ["Nix-shell Guide", "Usage Documentation"]}

{"concept": "What about shell.nix?", "explanation": "[Development] shell.nix defines development environments through: 1) Dependency declarations, 2) Environment setup, 3) Tool configuration, 4) Build settings. This creates reproducible development shells.", "examples": ["Basic configuration", "Complex setup"], "references": ["Shell.nix Guide", "Configuration Documentation"]}

{"concept": "How do you handle development dependencies?", "explanation": "[Development] Development dependency management includes: 1) Package specification, 2) Version pinning, 3) Build inputs, 4) Runtime dependencies. This ensures consistent development environments.", "examples": ["Dependency setup", "Version management"], "references": ["Dependency Guide", "Package Management Documentation"]}

{"concept": "What about development tools?", "explanation": "[Development] Development tool management involves: 1) Compiler setup, 2) Build tool configuration, 3) Debug tool integration, 4) Editor support. This provides necessary development capabilities.", "examples": ["Tool configuration", "Integration setup"], "references": ["Tools Guide", "Configuration Documentation"]}

{"concept": "How do you use direnv with Nix?", "explanation": "[Development] Direnv integration includes: 1) Environment automation, 2) Project-specific setup, 3) Shell hook configuration, 4) Path management. This enables automatic environment switching.", "examples": ["Direnv setup", "Integration configuration"], "references": ["Direnv Guide", "Integration Documentation"]}

{"concept": "What about IDE integration?", "explanation": "[Development] IDE integration involves: 1) Environment recognition, 2) Tool configuration, 3) Debug setup, 4) Extension management. This enables IDE-aware development environments.", "examples": ["IDE setup", "Tool integration"], "references": ["IDE Guide", "Integration Documentation"]}

{"concept": "How do you share development environments?", "explanation": "[Development] Environment sharing includes: 1) Configuration version control, 2) Team standardization, 3) Documentation practices, 4) Onboarding procedures. This enables consistent team development.", "examples": ["Sharing methods", "Team setup"], "references": ["Sharing Guide", "Team Documentation"]}

{"concept": "What about environment isolation?", "explanation": "[Development] Environment isolation involves: 1) Dependency separation, 2) Path isolation, 3) Tool versioning, 4) Resource management. This prevents environment conflicts.", "examples": ["Isolation setup", "Conflict prevention"], "references": ["Isolation Guide", "Environment Documentation"]}

{"concept": "What are development environment best practices?", "explanation": "[Development] Best practices include: 1) Clear documentation, 2) Version pinning, 3) Minimal environments, 4) Regular updates, 5) Team standardization. These ensure reliable development setups.", "examples": ["Setup practices", "Management methods"], "references": ["Best Practices Guide", "Environment Management Documentation"]}
