{"concept": "How do you create Nix packages?", "explanation": "[Package Management] Creating Nix packages involves: 1) Writing a derivation that describes the build process, 2) Specifying dependencies and build inputs, 3) Defining installation steps, 4) Setting up metadata. This creates reproducible package builds.", "examples": ["Simple package", "Complex application"], "references": ["Package Creation Guide", "Derivation Documentation"]}

{"concept": "What is a Nix derivation?", "explanation": "[Package Management] A derivation is a pure function that describes how to build a package. It includes: 1) Source location and hash, 2) Build dependencies, 3) Build instructions, 4) Installation process. Derivations ensure reproducible builds.", "examples": ["Basic derivation", "Build process"], "references": ["Derivation Guide", "Build System Documentation"]}

{"concept": "How do you handle package dependencies?", "explanation": "[Package Management] Package dependencies are managed through: 1) buildInputs for compile-time dependencies, 2) propagatedBuildInputs for runtime dependencies, 3) nativeBuildInputs for build tools, 4) checkInputs for tests. This ensures all needed components are available.", "examples": ["Dependency types", "Build requirements"], "references": ["Dependency Guide", "Build Configuration Documentation"]}

{"concept": "What are build phases?", "explanation": "[Package Management] Build phases in Nix packages include: 1) unpack for source extraction, 2) patch for modifications, 3) configure for setup, 4) build for compilation, 5) install for deployment. Each phase can be customized or skipped.", "examples": ["Phase customization", "Build process"], "references": ["Build Phase Guide", "Package Building Documentation"]}

{"concept": "How do you patch packages?", "explanation": "[Package Management] Patching packages involves: 1) Creating patch files, 2) Adding patches to patches attribute, 3) Modifying source in postPatch phase, 4) Testing patched builds. This allows fixing issues or adding features.", "examples": ["Patch application", "Source modification"], "references": ["Patching Guide", "Source Management Documentation"]}

{"concept": "What about package testing?", "explanation": "[Package Management] Package testing includes: 1) Unit tests in checkPhase, 2) Integration tests with nixosTests, 3) Build testing across platforms, 4) Runtime testing. Testing ensures package quality and functionality.", "examples": ["Test configuration", "Test execution"], "references": ["Testing Guide", "Quality Assurance Documentation"]}

{"concept": "How do you handle different platforms?", "explanation": "[Package Management] Platform support requires: 1) Platform-specific build instructions, 2) Conditional dependencies, 3) System-specific patches, 4) Cross-compilation setup. This enables packages to work across different systems.", "examples": ["Platform specifics", "Cross-compilation"], "references": ["Platform Guide", "Cross-Build Documentation"]}

{"concept": "What about package maintenance?", "explanation": "[Package Management] Package maintenance involves: 1) Regular version updates, 2) Security patch application, 3) Dependency management, 4) Bug fixing, 5) Documentation updates. Good maintenance ensures package reliability.", "examples": ["Update process", "Security fixes"], "references": ["Maintenance Guide", "Package Care Documentation"]}

{"concept": "How do you debug package builds?", "explanation": "[Package Management] Debugging package builds involves: 1) Using nix-shell to enter build environment, 2) Inspecting build logs, 3) Testing individual build phases, 4) Using debug flags. This helps identify and fix build issues.", "examples": ["Debug techniques", "Build inspection"], "references": ["Debugging Guide", "Build Troubleshooting Documentation"]}

{"concept": "What are packaging best practices?", "explanation": "[Package Management] Packaging best practices include: 1) Following the Nixpkgs manual, 2) Using standard build systems, 3) Minimizing patches, 4) Providing good metadata, 5) Testing thoroughly. These practices ensure high-quality packages.", "examples": ["Good practices", "Common patterns"], "references": ["Best Practices Guide", "Quality Standards Documentation"]}
