{"concept": "What is Nixpkgs?", "explanation": "[Package Management] Nixpkgs is the official package collection for NixOS, containing over 80,000 packages. It's a repository of Nix expressions that describe how to build packages from source. Nixpkgs ensures reproducible builds through pure functions and precise dependency specifications.", "examples": ["Package definitions", "Build instructions"], "references": ["Nixpkgs Manual", "Package Repository Documentation"]}

{"concept": "How is Nixpkgs organized?", "explanation": "[Package Management] Nixpkgs is organized into: 1) pkgs/* for package definitions, 2) lib/* for helper functions, 3) nixos/* for NixOS modules, 4) maintainers/* for maintainer information. The structure enables efficient package management and contribution.", "examples": ["Package categories", "Library organization"], "references": ["Repository Structure Guide", "Contribution Documentation"]}

{"concept": "How do you use packages from Nixpkgs?", "explanation": "[Package Management] Packages from Nixpkgs can be used through: 1) environment.systemPackages in configuration.nix, 2) nix-env for user installations, 3) nix-shell for development environments, 4) Direct references in Nix expressions. Each method suits different use cases.", "examples": ["System-wide installation", "User-specific packages"], "references": ["Package Usage Guide", "Installation Documentation"]}

{"concept": "What is the Nixpkgs standard environment?", "explanation": "[Package Management] The standard environment (stdenv) provides the basic tools and libraries for building packages. It includes: 1) C compiler and tools, 2) Basic system libraries, 3) Build utilities, 4) Shell utilities. Most packages are built using stdenv.", "examples": ["Standard build process", "Custom environments"], "references": ["Standard Environment Guide", "Build System Documentation"]}

{"concept": "How are packages versioned in Nixpkgs?", "explanation": "[Package Management] Nixpkgs uses explicit versioning where: 1) Package versions are part of the attribute name or metadata, 2) Multiple versions can coexist in /nix/store, 3) Version updates are tracked in the repository, 4) Stable and unstable channels offer different version policies.", "examples": ["Version specification", "Update process"], "references": ["Versioning Guide", "Package Maintenance Documentation"]}

{"concept": "What are package meta attributes?", "explanation": "[Package Management] Meta attributes provide metadata about packages including: 1) Description and homepage, 2) License information, 3) Maintainer contacts, 4) Platform support, 5) Update scheduling. This information helps users and maintainers manage packages.", "examples": ["Meta definitions", "Package information"], "references": ["Meta Attributes Guide", "Package Metadata Documentation"]}

{"concept": "How do you search Nixpkgs?", "explanation": "[Package Management] Nixpkgs can be searched through: 1) nix search command, 2) search.nixos.org web interface, 3) Package attribute path exploration, 4) GitHub repository search. Each method offers different ways to find packages.", "examples": ["Command-line search", "Web interface usage"], "references": ["Search Guide", "Package Discovery Documentation"]}

{"concept": "What are package dependencies in Nixpkgs?", "explanation": "[Package Management] Package dependencies in Nixpkgs are: 1) Explicitly declared in package definitions, 2) Precisely versioned through hashes, 3) Automatically managed by Nix, 4) Stored in isolation in /nix/store. This ensures reproducible builds and prevents conflicts.", "examples": ["Dependency declaration", "Runtime dependencies"], "references": ["Dependency Management Guide", "Package Building Documentation"]}

{"concept": "How do you contribute to Nixpkgs?", "explanation": "[Package Management] Contributing to Nixpkgs involves: 1) Following packaging guidelines, 2) Testing packages thoroughly, 3) Submitting pull requests, 4) Maintaining packages over time. The community has strict quality standards to ensure package reliability.", "examples": ["Package submission", "Maintenance workflow"], "references": ["Contribution Guide", "Maintainer Documentation"]}

{"concept": "What are channels in Nixpkgs?", "explanation": "[Package Management] Channels are rolling repositories of Nixpkgs versions. They include: 1) nixos-unstable for latest packages, 2) nixos-YY.MM for stable releases, 3) Small channels for specific purposes. Channels help manage system updates and stability.", "examples": ["Channel selection", "Update management"], "references": ["Channel Guide", "Update Management Documentation"]}
