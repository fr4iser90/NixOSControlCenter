{"concept": "What are Nix flakes?", "explanation": "[Package Management] Flakes are a modern feature of Nix that provide reproducible package sets and configurations. They: 1) Lock dependencies to specific versions, 2) Provide a standardized project structure, 3) Enable hermetic builds, 4) Support better composition of Nix projects.", "examples": ["Basic flake", "Project structure"], "references": ["Flakes Manual", "Modern Nix Guide"]}

{"concept": "How do you create a flake?", "explanation": "[Package Management] Creating a flake involves: 1) Creating a flake.nix file, 2) Defining inputs (dependencies), 3) Specifying outputs (packages, configurations), 4) Creating a flake.lock file. The structure ensures reproducible builds across systems.", "examples": ["Simple flake", "Complex project"], "references": ["Flake Creation Guide", "Project Setup Documentation"]}

{"concept": "What is the flake.nix structure?", "explanation": "[Package Management] A flake.nix file contains: 1) Description and metadata, 2) Input specifications, 3) Output definitions, 4) System-specific configurations. This structure provides a clear interface for Nix projects.", "examples": ["Basic structure", "Full configuration"], "references": ["File Structure Guide", "Configuration Documentation"]}

{"concept": "How do flake inputs work?", "explanation": "[Package Management] Flake inputs specify dependencies and their sources. They can be: 1) Other flakes, 2) Git repositories, 3) Local paths, 4) URL sources. Inputs are locked to specific versions in flake.lock.", "examples": ["Input declaration", "Version locking"], "references": ["Input Management Guide", "Dependency Documentation"]}

{"concept": "What are flake outputs?", "explanation": "[Package Management] Flake outputs define what the flake provides, including: 1) Packages, 2) NixOS configurations, 3) Development environments, 4) Library functions. Outputs are system-specific and can be composed.", "examples": ["Output types", "System targets"], "references": ["Output Guide", "Build Configuration Documentation"]}

{"concept": "How do you use flakes in NixOS?", "explanation": "[Package Management] Using flakes in NixOS involves: 1) Enabling flakes feature, 2) Converting configurations to flake format, 3) Using flake-aware commands, 4) Managing system configurations. Flakes provide better reproducibility for system configurations.", "examples": ["System configuration", "Command usage"], "references": ["NixOS Integration Guide", "System Management Documentation"]}

{"concept": "What is the flake registry?", "explanation": "[Package Management] The flake registry maps names to flake URLs, providing: 1) Central package source management, 2) Version control integration, 3) Dependency resolution, 4) Custom registry support. It simplifies flake reference and management.", "examples": ["Registry usage", "Custom registries"], "references": ["Registry Guide", "Source Management Documentation"]}

{"concept": "How do you develop with flakes?", "explanation": "[Package Management] Development with flakes involves: 1) Creating development shells, 2) Managing project dependencies, 3) Setting up CI/CD, 4) Testing configurations. Flakes provide consistent development environments.", "examples": ["Development setup", "Testing workflow"], "references": ["Development Guide", "Workflow Documentation"]}

{"concept": "What are flake templates?", "explanation": "[Package Management] Flake templates are reusable project structures that: 1) Define common patterns, 2) Set up development environments, 3) Provide configuration examples, 4) Enable quick project creation. Templates help standardize Nix projects.", "examples": ["Using templates", "Creating templates"], "references": ["Template Guide", "Project Initialization Documentation"]}

{"concept": "How do you update flake locks?", "explanation": "[Package Management] Updating flake locks involves: 1) Using nix flake update, 2) Specifying input updates, 3) Managing lock file versions, 4) Testing updated dependencies. This ensures controlled dependency updates.", "examples": ["Update process", "Version management"], "references": ["Update Guide", "Lock Management Documentation"]}
