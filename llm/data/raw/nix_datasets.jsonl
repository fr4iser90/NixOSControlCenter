{"concept": "What is Nix?", "explanation": "Nix is a powerful package manager and build system that makes package management reliable and reproducible. It uses a purely functional approach where packages are built in isolation from each other."}
{"concept": "How do you install a package using Nix?", "explanation": "To install a package using Nix, you use the command 'nix-env -iA nixpkgs.packagename'. For example: 'nix-env -iA nixpkgs.firefox'"}
{"concept": "What is a Nix derivation?", "explanation": "A Nix derivation is a description of how to build a package. It includes all inputs, dependencies, and build instructions needed to create the package in a reproducible way."}
{"concept": "How do you search for packages in Nix?", "explanation": "You can search for packages using 'nix search packagename' or 'nix-env -qaP | grep packagename'"}
{"concept": "What is the Nix store?", "explanation": "The Nix store (/nix/store) is where Nix keeps all package files. Each package has a unique hash prefix ensuring different versions can coexist"}
{"concept": "How do you uninstall a package in Nix?", "explanation": "Use 'nix-env -e packagename' to uninstall a package"}
{"concept": "What is a Nix channel?", "explanation": "A Nix channel is a source of Nix packages and expressions, similar to repositories in other package managers"}
{"concept": "How do you update Nix packages?", "explanation": "First update channels with 'nix-channel --update', then upgrade packages with 'nix-env -u'"}
{"concept": "What is nix-shell?", "explanation": "nix-shell provides a shell environment with specific packages installed, perfect for development environments"}
{"concept": "How do you write a Nix expression?", "explanation": "Nix expressions are written in the Nix language, using the .nix extension. They describe how to build and configure packages"}
{"concept": "What is garbage collection in Nix?", "explanation": "Garbage collection removes unused packages from the Nix store using 'nix-collect-garbage'"}
{"concept": "How do you pin package versions in Nix?", "explanation": "Use a specific version of nixpkgs or create a Nix expression that references exact package versions"}
{"concept": "What is the difference between nix-env and nix-shell?", "explanation": "nix-env installs packages globally, while nix-shell provides temporary environments with specific packages"}
{"concept": "How do you create a Nix package?", "explanation": "Create a default.nix file describing the package's dependencies, build process, and metadata"}
{"concept": "What is pure evaluation in Nix?", "explanation": "Pure evaluation means that building a package always produces the same result, regardless of what's installed on the system"}