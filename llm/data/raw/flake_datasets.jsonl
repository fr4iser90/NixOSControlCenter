{"concept": "What are Nix Flakes?", "explanation": "Nix Flakes are a new feature of Nix that provide a standardized way to define reproducible and composable Nix packages and configurations with dependencies."}
{"concept": "What is the basic structure of a flake.nix?", "explanation": "A flake.nix contains: inputs (dependencies), outputs (what the flake produces), and a description. Basic structure: '{ inputs = {}; outputs = { self, nixpkgs }: {}; description = \"\"; }'"}
{"concept": "How do you initialize a new flake?", "explanation": "Create a new flake with 'nix flake init' in an empty directory, or add a flake.nix and flake.lock manually"}
{"concept": "What is a flake.lock file?", "explanation": "The flake.lock file pins exact versions of all dependencies, ensuring reproducible builds across different machines and times"}
{"concept": "How do you update flake inputs?", "explanation": "Use 'nix flake update' to update all inputs, or 'nix flake update input-name' for specific inputs"}
{"concept": "What are flake inputs?", "explanation": "Inputs are dependencies of your flake, like nixpkgs or other flakes. They're specified in the inputs section of flake.nix"}
{"concept": "How do you reference another flake?", "explanation": "Use the git URL or local path in inputs: 'inputs.myflake.url = \"github:user/repo\";' or 'inputs.myflake.url = \"path:./local-flake\";'"}
{"concept": "What is the difference between flake and legacy Nix?", "explanation": "Flakes provide better reproducibility, standardized structure, and explicit dependencies, while legacy Nix uses channels and less structured configurations"}
{"concept": "How do you build a flake?", "explanation": "Use 'nix build .#package-name' or 'nix build github:user/repo#package-name' for remote flakes"}
{"concept": "What are flake outputs?", "explanation": "Outputs are what a flake produces: packages, NixOS configurations, development shells, or other Nix expressions"}
{"concept": "How do you create a development shell with flakes?", "explanation": "Define a devShell output and use 'nix develop' to enter it"}
{"concept": "What is the purpose of flake registry?", "explanation": "The flake registry maps names to flake URLs, making it easier to reference commonly used flakes"}
{"concept": "How do you add a flake to registry?", "explanation": "Use 'nix registry add name github:user/repo' to add a flake to your user registry"}
{"concept": "Can flakes replace channels?", "explanation": "Yes, flakes are designed to replace channels with a more reproducible and explicit dependency management system"}
{"concept": "How do you share flakes between projects?", "explanation": "Reference them as inputs in your flake.nix, either through git URLs or local paths"}
{"concept": "What is a flake template?", "explanation": "A template is a predefined project structure that can be used to initialize new projects with 'nix flake init -t template'"}