{"concept": "What is NixOS?", "explanation": "[Basics] NixOS is a Linux distribution that uses the Nix package manager to configure systems declaratively and ensure reproducibility."}
{"concept": "What is the Nix Package Manager?", "explanation": "[Package Management] The Nix Package Manager is a powerful package manager for Linux and other Unix systems that enables reliable and reproducible package management."}
{"concept": "How does the Nix file system work?", "explanation": "[System Architecture] Nix stores packages in isolated paths under /nix/store to avoid conflicts and allow multiple versions to coexist."}
{"concept": "What are Nix Flakes?", "explanation": "[Advanced Features] Nix Flakes are an experimental feature that enables reproducible builds and standardized project structures in Nix projects."}
{"concept": "How do I install software in NixOS?", "explanation": "[Package Management] Software in NixOS is installed via the configuration file /etc/nixos/configuration.nix or using the command nix-env -iA <package>."}
{"concept": "What is declarative configuration in NixOS?", "explanation": "[Configuration Management] Declarative configuration in NixOS means that the entire system state is described in configuration files, allowing easy reproduction and version control."}
{"concept": "How do I update NixOS?", "explanation": "[System Maintenance] You can update NixOS by running nixos-rebuild switch --upgrade, which updates packages and applies new configurations."}
{"concept": "What is /nix/store?", "explanation": "[System Architecture] The /nix/store directory is where all Nix-managed packages and build outputs are stored in unique, content-addressed paths."}
{"concept": "How does NixOS handle rollbacks?", "explanation": "[System Recovery] NixOS supports system rollbacks by keeping previous system generations, which you can boot into via the bootloader or switch using nixos-rebuild switch --rollback."}
{"concept": "What is a derivation in Nix?", "explanation": "[Package Management] A derivation is the low-level build instruction in Nix that defines how software packages are built and what dependencies they have."}
{"concept": "How can I manage user accounts in NixOS?", "explanation": "[User Management] User accounts in NixOS are managed declaratively in the configuration.nix file under users.users.<username>."}
{"concept": "What are system generations in NixOS?", "explanation": "[System Maintenance] System generations are snapshots of the system configuration. Each time you run nixos-rebuild, a new generation is created."}
{"concept": "Can NixOS run on ARM architecture?", "explanation": "[Hardware Compatibility] Yes, NixOS supports ARM architectures, including popular devices like the Raspberry Pi and Jetson boards."}
{"concept": "What is nix-env?", "explanation": "[Package Management] nix-env is a command-line tool for managing user-specific packages in Nix, allowing installation, upgrade, and removal of packages."}
{"concept": "How do I enable services in NixOS?", "explanation": "[Service Management] Services in NixOS are enabled declaratively in the configuration.nix file using services.<service_name>.enable = true;."}
{"concept": "What are Nix channels?", "explanation": "[Package Sources] Nix channels are collections of Nix expressions that provide package versions and updates. You can subscribe to channels like nixos-unstable."}
{"concept": "How do I clean up old packages in NixOS?", "explanation": "[System Maintenance] You can clean up old packages with nix-collect-garbage -d, which deletes unreferenced packages and outdated generations."}
{"concept": "What is nix-shell?", "explanation": "[Development Tools] nix-shell is a development tool that provides isolated environments with specific dependencies without affecting the global system."}
{"concept": "How do I configure networking in NixOS?", "explanation": "[Networking] Networking is configured declaratively in NixOS using options like networking.interfaces and networking.networkmanager.enable."}
{"concept": "What is the purpose of nixos-rebuild?", "explanation": "[System Configuration] nixos-rebuild applies system configuration changes, rebuilds the system, and manages system generations."}
{"concept": "How do I update my system in NixOS?", "explanation": "[System Maintenance] You can update your NixOS system by running 'nixos-rebuild switch --upgrade' or by updating your flake if you're using one."}
{"concept": "What is a Nix derivation?", "explanation": "[Package Management] A derivation in Nix is a low-level representation of how to build a package, including its dependencies, build instructions, and environment settings."}
{"concept": "Can I use Nix on macOS?", "explanation": "[Cross-Platform Usage] Yes, the Nix package manager can be installed on macOS, allowing you to manage software in an isolated, reproducible manner."}
{"concept": "What is nix-shell used for?", "explanation": "[Development Tools] nix-shell is a command that opens a shell with a specified development environment, including all necessary dependencies."}
{"concept": "How does Nix handle dependencies?", "explanation": "[Package Management] Nix handles dependencies by storing them in isolated paths in /nix/store, ensuring no conflicts between versions or packages."}
{"concept": "What is a flake.lock file?", "explanation": "[Advanced Features] The flake.lock file in Nix ensures reproducibility by locking dependencies to specific versions."}
{"concept": "How do I rollback in NixOS?", "explanation": "[System Maintenance] You can rollback to a previous system configuration using 'sudo nixos-rebuild switch --rollback' or selecting an older generation at boot."}
{"concept": "What is nix-env?", "explanation": "[Package Management] nix-env is a command-line tool for managing user-specific packages in Nix, allowing installations, upgrades, and removals."}
{"concept": "Can NixOS be used on servers?", "explanation": "[Server Management] Yes, NixOS is highly suitable for servers due to its declarative configuration, reproducibility, and ease of automation."}
{"concept": "How does Nix ensure reproducible builds?", "explanation": "[Reproducibility] Nix ensures reproducible builds by using isolated environments, precise dependency specifications, and cryptographic hashes."}
{"concept": "What are Nix channels?", "explanation": "[Package Management] Nix channels are collections of Nix expressions that define available packages and versions, used to control updates."}
{"concept": "How do I configure services in NixOS?", "explanation": "[System Configuration] Services in NixOS are configured declaratively in /etc/nixos/configuration.nix using the services.<name>.enable = true; syntax."}
{"concept": "What is NixOps?", "explanation": "[Deployment Tools] NixOps is a tool for deploying NixOS configurations to physical or virtual machines, useful for managing cloud infrastructure."}
{"concept": "How do I set environment variables in NixOS?", "explanation": "[System Configuration] Environment variables in NixOS can be set in /etc/nixos/configuration.nix using environment.variables.<name> = \"<value>\";."}
{"concept": "What is Home Manager in NixOS?", "explanation": "[User Configuration] Home Manager is a tool for managing user-specific configurations with Nix, extending NixOS principles to dotfiles and user environments."}
{"concept": "How do I create a custom Nix package?", "explanation": "[Package Development] You can create a custom Nix package by writing a Nix expression that defines the package's source, build instructions, and dependencies."}
{"concept": "Can I run Docker on NixOS?", "explanation": "[Virtualization] Yes, Docker can be enabled in NixOS through the configuration.nix file by setting virtualisation.docker.enable = true;."}
{"concept": "What is the Nix store?", "explanation": "[System Architecture] The Nix store (/nix/store) is where all packages, configurations, and dependencies are stored in isolated, hash-based paths."}
{"concept": "How do I clean up old generations in NixOS?", "explanation": "[System Maintenance] You can clean up old generations using 'sudo nix-collect-garbage -d', which deletes outdated packages and configurations."}
{"concept": "What is declarative configuration in NixOS?", "explanation": "[System Configuration] Declarative configuration in NixOS means describing your system's desired state in code, allowing for consistent, reproducible setups."}
{"concept": "How do I manage multiple versions of a package in NixOS?", "explanation": "[Package Management] You can manage multiple versions by using different package derivations or specifying exact versions in your configuration."}
{"concept": "What is the purpose of /nix/store?", "explanation": "[System Architecture] The /nix/store directory holds all packages, configurations, and dependencies in isolated, hash-based paths for reproducibility."}
{"concept": "How do I pin Nixpkgs to a specific version?", "explanation": "[Package Management] You can pin Nixpkgs by using a specific commit hash in your flake.nix or by importing a tarball URL in your configuration."}
{"concept": "What is nix-collect-garbage used for?", "explanation": "[System Maintenance] nix-collect-garbage is used to remove unused packages and system generations, freeing up disk space."}
{"concept": "Can I run virtual machines on NixOS?", "explanation": "[Virtualization] Yes, NixOS supports virtual machines through tools like QEMU, KVM, and VirtualBox, configurable in configuration.nix."}
{"concept": "What is nix-build?", "explanation": "[Development Tools] nix-build is a command that builds Nix expressions into derivations, producing the final package outputs."}
{"concept": "How do I enable SSH on NixOS?", "explanation": "[System Configuration] You can enable SSH by adding services.openssh.enable = true; to your /etc/nixos/configuration.nix and rebuilding."}
{"concept": "What is a derivation file in Nix?", "explanation": "[Package Development] A derivation file is a low-level representation of how to build a package, including build steps and dependencies."}
{"concept": "How do I manage users in NixOS?", "explanation": "[System Configuration] Users are managed declaratively in /etc/nixos/configuration.nix using users.users.<name> configurations."}
{"concept": "Can I run graphical applications with Nix?", "explanation": "[Cross-Platform Usage] Yes, Nix can manage and run graphical applications on NixOS and other supported platforms."}
{"concept": "What is nix-instantiate?", "explanation": "[Development Tools] nix-instantiate generates derivations from Nix expressions without building them, useful for debugging and analysis."}
{"concept": "How do I set up a basic web server with NixOS?", "explanation": "[Server Management] You can set up a web server like Nginx by enabling services.nginx.enable = true; in configuration.nix."}
{"concept": "What are overlays in Nixpkgs?", "explanation": "[Package Development] Overlays allow you to extend or modify Nixpkgs without changing the original source, enabling custom package modifications."}
{"concept": "How do I handle secrets in NixOS?", "explanation": "[Security] Secrets can be managed using tools like agenix, sops, or environment variables with restricted permissions."}
{"concept": "Can I cross-compile with Nix?", "explanation": "[Development Tools] Yes, Nix supports cross-compilation for different architectures by defining crossSystem in your Nix expressions."}
{"concept": "How do I upgrade Nix itself?", "explanation": "[System Maintenance] You can upgrade Nix by running nix-env -iA nixpkgs.nix or using your system configuration for NixOS."}
{"concept": "What is the difference between nix-env and nix-shell?", "explanation": "[Development Tools] nix-env manages user environments permanently, while nix-shell creates temporary environments for development."}
{"concept": "How do I use binary caches in Nix?", "explanation": "[Package Management] Binary caches speed up builds by downloading pre-built packages. You can add them via substituters in nix.conf."}
{"concept": "What is Hydra in the Nix ecosystem?", "explanation": "[Deployment Tools] Hydra is a continuous integration (CI) system for Nix-based projects, automating builds and tests."}
{"concept": "How do I create a Nix flake?", "explanation": "[Advanced Features] You can create a Nix flake by initializing a repository with 'nix flake init' and defining inputs and outputs in flake.nix."}
{"concept": "How does NixOS handle system hardening?", "explanation": "[Security] NixOS provides built-in security hardening options through security.* options in configuration.nix, including AppArmor, SELinux, and various kernel hardening features."}
{"concept": "What are NixOS modules?", "explanation": "[System Configuration] NixOS modules are reusable configuration units that encapsulate related settings, options, and services, allowing for modular and maintainable system configurations."}
{"concept": "How do I debug NixOS builds?", "explanation": "[Development Tools] You can debug NixOS builds using nix-build --keep-failed, nix-shell -A package, or by examining build logs in /nix/var/log/nix."}
{"concept": "What is the NixOS testing framework?", "explanation": "[Testing] NixOS provides a powerful testing framework that allows you to test complete system configurations in virtual machines, ensuring system reliability."}
{"concept": "How do I create custom NixOS modules?", "explanation": "[System Configuration] Custom NixOS modules are created by defining options, config, and imports in a Nix expression, following the module system's conventions."}
{"concept": "What are NixOS containers?", "explanation": "[Virtualization] NixOS containers are lightweight virtualization solutions that allow running isolated NixOS environments without full VM overhead."}
{"concept": "How does NixOS handle boot management?", "explanation": "[System Architecture] NixOS uses GRUB or systemd-boot for boot management, maintaining multiple boot configurations and enabling easy rollbacks."}
{"concept": "What is the NixOS release cycle?", "explanation": "[System Maintenance] NixOS follows a regular release cycle with stable releases every 6 months, while maintaining a rolling release channel (unstable)."}
{"concept": "How do I profile NixOS resource usage?", "explanation": "[System Maintenance] NixOS provides tools like nix-store --optimise and nix-store --verify to analyze and optimize system resource usage."}
{"concept": "What are NixOS options?", "explanation": "[System Configuration] NixOS options are configurable system parameters defined in modules that control various aspects of the system configuration."}
